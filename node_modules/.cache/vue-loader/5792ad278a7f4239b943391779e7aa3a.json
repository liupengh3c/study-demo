{"remainingRequest":"/Users/liupeng17/Documents/work/vue/study-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liupeng17/Documents/work/vue/study-demo/src/views/login/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liupeng17/Documents/work/vue/study-demo/src/views/login/index.vue","mtime":1559615676419},{"path":"/Users/liupeng17/Documents/work/vue/study-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liupeng17/Documents/work/vue/study-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liupeng17/Documents/work/vue/study-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liupeng17/Documents/work/vue/study-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { validUsername } from \"@/utils/validate\";\nimport SocialSign from \"./components/SocialSignin\";\n\nexport default {\n    name: \"Login\",\n    components: { SocialSign },\n    data() {\n        const validateUsername = (rule, value, callback) => {\n            if (!validUsername(value)) {\n                callback(new Error(\"Please enter the correct user name\"));\n            } else {\n                callback();\n            }\n        };\n        const validatePassword = (rule, value, callback) => {\n            if (value.length < 6) {\n                callback(\n                    new Error(\"The password can not be less than 6 digits\")\n                );\n            } else {\n                callback();\n            }\n        };\n        return {\n            loginForm: {\n                username: \"admin\",\n                password: \"111111\"\n            },\n            loginRules: {\n                username: [\n                    {\n                        required: true,\n                        trigger: \"blur\",\n                        validator: validateUsername\n                    }\n                ],\n                password: [\n                    {\n                        required: true,\n                        trigger: \"blur\",\n                        validator: validatePassword\n                    }\n                ]\n            },\n            passwordType: \"password\",\n            capsTooltip: false,\n            loading: false,\n            showDialog: false,\n            redirect: undefined\n        };\n    },\n    watch: {\n        $route: {\n            handler: function(route) {\n                this.redirect = route.query && route.query.redirect;\n            },\n            immediate: true\n        }\n    },\n    created() {\n        // window.addEventListener('storage', this.afterQRScan)\n    },\n    mounted() {\n        if (this.loginForm.username === \"\") {\n            this.$refs.username.focus();\n        } else if (this.loginForm.password === \"\") {\n            this.$refs.password.focus();\n        }\n    },\n    destroyed() {\n        // window.removeEventListener('storage', this.afterQRScan)\n    },\n    methods: {\n        checkCapslock({ shiftKey, key } = {}) {\n            if (key && key.length === 1) {\n                if (\n                    (shiftKey && (key >= \"a\" && key <= \"z\")) ||\n                    (!shiftKey && (key >= \"A\" && key <= \"Z\"))\n                ) {\n                    this.capsTooltip = true;\n                } else {\n                    this.capsTooltip = false;\n                }\n            }\n            if (key === \"CapsLock\" && this.capsTooltip === true) {\n                this.capsTooltip = false;\n            }\n        },\n        showPwd() {\n            if (this.passwordType === \"password\") {\n                this.passwordType = \"\";\n            } else {\n                this.passwordType = \"password\";\n            }\n            this.$nextTick(() => {\n                this.$refs.password.focus();\n            });\n        },\n        handleLogin() {\n            this.$refs.loginForm.validate(valid => {\n                if (valid) {\n                    this.loading = true;\n                    this.$store\n                        .dispatch(\"user/login\", this.loginForm)\n                        .then(() => {\n                            this.$router.push({ path: this.redirect || \"/\" });\n                            this.loading = false;\n                        })\n                        .catch(() => {\n                            this.loading = false;\n                        });\n                } else {\n                    console.log(\"error submit!!\");\n                    return false;\n                }\n            });\n        }\n        // afterQRScan() {\n        //   if (e.key === 'x-admin-oauth-code') {\n        //     const code = getQueryObject(e.newValue)\n        //     const codeMap = {\n        //       wechat: 'code',\n        //       tencent: 'code'\n        //     }\n        //     const type = codeMap[this.auth_type]\n        //     const codeName = code[type]\n        //     if (codeName) {\n        //       this.$store.dispatch('LoginByThirdparty', codeName).then(() => {\n        //         this.$router.push({ path: this.redirect || '/' })\n        //       })\n        //     } else {\n        //       alert('第三方登录失败')\n        //     }\n        //   }\n        // }\n    }\n};\n",null]}